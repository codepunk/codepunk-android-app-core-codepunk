/*
 * Copyright (C) 2019 Codepunk, LLC
 * Author(s): Scott Slater
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'

// region Android

android {

    compileSdkVersion config.compileSdk
    buildToolsVersion config.buildTools

    defaultConfig {
        applicationId "com.codepunk.core"
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"

            ext.defaultAuthEnvironment = "local"
            ext.loggingLevel = 1 // Essentially everything
            ext.logLevel = "VERBOSE"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.defaultAuthEnvironment = "prod"
            ext.loggingLevel = 4 // android.util.Log.INFO
            ext.logLevel = "INFO"
        }
    }

    applicationVariants.all { variant ->
        /*
         * Generate a set of key/value pairs that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeStringConstantValues(
                variant,
                Pair.of(
                        "DEFAULT_AUTH_ENVIRONMENT",
                        variant.buildType.ext.defaultAuthEnvironment
                ),
                Pair.of(
                        "AUTHENTICATOR_ACCOUNT_TYPE",
                        variant.applicationId
                )
        )

        /*
         * Define a BuildConfig int variable for the log level.
         */
        def logClass = "android.util.Log"
        variant.buildConfigField(
                "int",
                "LOG_LEVEL",
                "${logClass}.${variant.buildType.ext.logLevel}"
        )

        /*
         * Generate a set of preference keys that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makePreferenceKeys(
                variant,
                "ABOUT",
                "ADD_OR_CHANGE_ACCOUNT",
                "AUTHENTICATED_USERNAME",
                "CATEGORY_ACCOUNTS",
                "DEV_OPTIONS_AUTH_ENVIRONMENT",
                "DEV_OPTIONS_AUTHENTICATED_HASH",
                "DEV_OPTIONS_BASE_URL",
                "DEV_OPTIONS_ENABLED",
                "DEV_OPTIONS_OVERRIDE_BASE_URL",
                "DEV_OPTIONS_UNLOCKED",
                "LOG_OUT"
        )

        /*
         * Generate a set of intent actions that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentEntities(
                variant,
                IntentEntityType.ACTION,
                "AUTHENTICATION",
                "MAIN",
                "SETTINGS"
        )

        /*
         * Generate a set of intent categories that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentEntities(
                variant,
                IntentEntityType.CATEGORY,
                "CHOOSE",
                "DEVELOPER",
                "LOG_IN",
                "MAIN",
                "SIGN_UP"
        )

        /*
         * Generate a set of intent categories that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentEntities(
                variant,
                IntentEntityType.EXTRA,
                "AUTH_TOKEN_TYPE",
                "DEV_OPTIONS_PASSWORD_HASH",
                "USERNAME"
        )

        /*
         * Generate a set of unique bundle keys that are accessible as BuildConfig constants.
         */
        makeKeys(
                variant,
                "ACCOUNT",
                "DEV_OPTIONS_CLICKS_REMAINING"
        )

        /*
         * Pull private values from gradle.properties
         * (See http://www.rainbowbreeze.it/environmental-variables-api-key-and-secret-buildconfig-and-android-studio/)
         * (Also see https://medium.com/@ericfu/securely-storing-secrets-in-an-android-application-501f030ae5a3
         *  for info about using KeyStore)
         */
        def codepunkLocalClientIdProp = project.hasProperty("CodepunkLocalClientIdProp") ?
                "\"${CodepunkLocalClientIdProp}\"" :
                "/**** Define Codepunk Local Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_LOCAL_CLIENT_ID", codepunkLocalClientIdProp)

        def codepunkLocalClientSecretProp = project.hasProperty("CodepunkLocalClientSecretProp") ?
                "\"${CodepunkLocalClientSecretProp}\"" :
                "/**** Define Codepunk Local Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_LOCAL_CLIENT_SECRET", codepunkLocalClientSecretProp)

        def codepunkDevClientIdProp = project.hasProperty("CodepunkDevClientIdProp") ?
                "\"${CodepunkDevClientIdProp}\"" :
                "/**** Define Codepunk Dev Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_DEV_CLIENT_ID", codepunkDevClientIdProp)

        def codepunkDevClientSecretProp = project.hasProperty("CodepunkDevClientSecretProp") ?
                "\"${CodepunkDevClientSecretProp}\"" :
                "/**** Define Codepunk Dev Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_DEV_CLIENT_SECRET", codepunkDevClientSecretProp)

        def codepunkProdClientIdProp = project.hasProperty("CodepunkProdClientIdProp") ?
                "\"${CodepunkProdClientIdProp}\"" :
                "/**** Define Codepunk Prod Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_PROD_CLIENT_ID", codepunkProdClientIdProp)

        def codepunkProdClientSecretProp = project.hasProperty("CodepunkProdClientSecretProp") ?
                "\"${CodepunkProdClientSecretProp}\"" :
                "/**** Define Codepunk Prod Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_PROD_CLIENT_SECRET", codepunkProdClientSecretProp)

        def developerOptionsPasswordHash = project.hasProperty("DeveloperOptionsPasswordHash") ?
                "\"${DeveloperOptionsPasswordHash}\"" :
                "/**** Define Developer Password Hash ****/ \"\""
        variant.buildConfigField("String", "DEVELOPER_OPTIONS_PASSWORD_HASH", developerOptionsPasswordHash)

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "${rootProject.buildDir}/javadoc"
        includeNonPublic = true
    }

}

// endregion Android

// region Dependencies

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation group: 'android.arch.persistence.room', name: 'runtime', version: versions.room
    implementation group: 'androidx.appcompat', name: 'appcompat', version: versions.androidx.appcompat
    implementation group: 'androidx.core', name: 'core-ktx', version: versions.androidx.core
    implementation group: 'androidx.constraintlayout', name: 'constraintlayout', version: versions.androidx.constraintlayout
    implementation group: 'androidx.lifecycle', name: 'lifecycle-common-java8', version: versions.androidx.lifecycle
    implementation group: 'androidx.lifecycle', name: 'lifecycle-extensions', version: versions.androidx.lifecycle
    implementation group: 'androidx.navigation', name: 'navigation-fragment-ktx', version: versions.androidx.navigation
    implementation group: 'androidx.navigation', name: 'navigation-ui-ktx', version: versions.androidx.navigation
    implementation group: 'androidx.preference', name: 'preference', version: versions.androidx.preference

    implementation group: 'com.google.dagger', name: 'dagger', version: versions.dagger
    implementation group: 'com.google.dagger', name: 'dagger-android', version: versions.dagger
    implementation group: 'com.google.dagger', name: 'dagger-android-support', version: versions.dagger
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: versions.retrofit
    implementation group: 'com.squareup.retrofit2', name: 'converter-moshi', version: versions.retrofit

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: versions.kotlin

    implementation group: 'commons-codec', name: 'commons-codec', version: versions.commons_codec

    implementation project(':doofenschmirtz')

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt group: 'android.arch.persistence.room', name: 'compiler', version: versions.room
    kapt group: 'com.google.dagger', name: 'dagger-android-processor', version: versions.dagger
    kapt group: 'com.google.dagger', name: 'dagger-compiler', version: versions.dagger

    testImplementation group: 'junit', name: 'junit', version: versions.junit
    testImplementation group: 'androidx.arch.core', name: 'core-testing', version: versions.androidx.lifecycle
    androidTestImplementation group: 'android.arch.persistence.room', name: 'testing', version: versions.room
    androidTestImplementation group: 'androidx.test', name: 'runner', version: versions.testrunner
    androidTestImplementation group: 'androidx.test.espresso', name: 'espresso-core', version: versions.espresso
}

// endregion Dependencies

// region Methods

import com.android.utils.Pair
import com.android.build.gradle.api.BaseVariant

static def makeIntConstantValues(BaseVariant variant, Pair<String, Integer>... pairs) {
    pairs.each { pair ->
        def buildConfigValue = "${pair.second}"
        variant.buildConfigField("int", pair.first, buildConfigValue)

        def resourceName = pair.first.toLowerCase(Locale.US)
        variant.resValue("integer", resourceName, pair.second.toString())
    }
}

static def makeStringConstantValues(BaseVariant variant, Pair<String, String>... pairs) {
    pairs.each { pair ->
        def buildConfigValue = "\"${pair.second}\""
        variant.buildConfigField("String", pair.first, buildConfigValue)

        def resourceName = pair.first.toLowerCase(Locale.US)
        variant.resValue("string", resourceName, pair.second)
    }
}

static def makeKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def buildConfigName = "KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$key\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)
    }
}

static def makePreferenceKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def fullKey = "PREF_KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$fullKey\""
        variant.buildConfigField("String", fullKey, buildConfigValue)

        def resourceName = fullKey.toLowerCase(Locale.US)
        def resourceValue = "${variant.applicationId}.$fullKey"
        variant.resValue("string", resourceName, resourceValue)
    }
}

def enum IntentEntityType {
    ACTION,
    CATEGORY,
    EXTRA
}

static def makeIntentEntities(BaseVariant variant, IntentEntityType type, String... names) {
    names.each { name ->
        def lowerType = type.toString().toLowerCase(Locale.US)
        def buildConfigName = "${type.toString()}_$name"
        def buildConfigValue = "\"${variant.applicationId}.intent.$lowerType.$name\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)

        def resourceName = "intent_${lowerType}_${name.toLowerCase(Locale.US)}"
        def resourceValue = "${variant.applicationId}.intent.$lowerType.$name"
        variant.resValue("string", resourceName, resourceValue)
    }
}

// endregion Methods

